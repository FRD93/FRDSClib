TITLE:: FRDRainPlugIn
summary:: Ring modulator whose modulation frequency is tracked on the input signal.
categories:: FRD-PlugIns


DESCRIPTION::

Ring modulator whose modulation frequency is tracked on the input signal. The fundamental frequency of the input signal is tracked and, whenever a consistent value is extracted, a sinusoidal oscillator of the same pitch is multiplied with the input signal by means of an AR envelope (1.0 - env).


CLASSMETHODS::


METHOD:: new
Create a new FRDRainPlugIn instance.
ARGUMENT:: outCh
Output channel.
ARGUMENT:: enabled
Turn on/off pitch tracking.
ARGUMENT:: min_time_diff
Minimum time required to overwrite the frequency of the modulator between consecutive detections.
ARGUMENT:: inertia
Duration of the attack and release times of the ring modulation's envelope.
ARGUMENT:: addAction
Add action for the synth (defaults to 'addToHead').
ARGUMENT:: actionNode
Node to connect the addAction to (if needed by the addAction argument, defaults to 1).
returns:: A FRDRainPlugIn instance.


INSTANCEMETHODS::


METHOD:: outCh
Get/set the output channel index.
Output channel index.
returns:: Output channel index.

METHOD:: synth
Get the synth instance.
returns:: Synth instance.

METHOD:: asMixerMatrixProcess
Return a Dictionary for integration with FRDMixerMatrixPlugIn.

METHOD:: showGUI
Show the graphical user interface.

METHOD:: writeSynthDef
Write internal synth definitions (to be run only once when installing this class!).













METHOD:: unroute
Disconnect two processes.

ARGUMENT:: fromProcess
Process name whose output is unrouted.

ARGUMENT:: toProcess
Process name whose input is unrouted.

ARGUMENT:: fadeTime
Fade out time in seconds.

returns:: A Router instance.



METHOD:: addProcess
Add a new process.

ARGUMENT:: name
Name of the process

ARGUMENT:: inChannels
Number of input channels.

ARGUMENT:: outChannels
Numbero of output channels.

ARGUMENT:: chIN
Input bus channel.

ARGUMENT:: chOUT
Output bus channel.

returns:: A Router instance.





EXAMPLES::

Basic usage:

code::

(
// Some test source
SynthDef(\TestSignal, { | outCh=20 |
	var sig, env, trig, freq;
	trig = Impulse.kr(TRand.kr(0.5, 8, Impulse.kr(0.5)).round(0.25));
	freq = TExpRand.kr(38, 99, trig).round(6).midicps;
	env = EnvGen.ar(Env.perc(0.01, 0.21), trig, 1, 0.0, TExpRand.kr(0.75, 1.25, Impulse.kr(0.25)), doneAction: 0);
	sig = SinOsc.ar(freq + SinOsc.ar(freq*env, 0, 0.5*freq*env*SinOsc.ar(0.1).abs.pow(4)), 0, env * 0.1 * AmpCompA.kr(freq));
	sig = Pan2.ar(sig, Lag2.ar(TRand.ar(-0.63, 0.63, trig), 0.5));
	Out.ar(outCh, sig);
}).add;
)

(
// White noise might be better for testing
SynthDef(\TestSignal, { | outCh=20 |
	var sig, env, trig, freq;
	sig = WhiteNoise.ar(0.01) ! 2;
	Out.ar(outCh, sig);
}).add;
)

(
// Run source
x = Synth.head(s, \TestSignal);
// Run reverb plug in
r = FRDReverbPlugIn(inCh: 20, outCh: 0, wet: 0.4, feed: 0.65, clearness: 0.19 ,centerfreq: 2400, addAction: 'addToTail', actionNode: 1);
)

// Show GUI
r.showGUI();

// Some scoping
(
s.meter;
s.scope;
s.freqscope;
)

// Change clearness
r.clearness_(-2);
r.clearness_(2);
r.clearness_(0);
r.clearness_(0.25);
r.clearness_(-0.25);

// Change centerfreq
r.centerfreq_(20);
r.centerfreq_(400);
r.centerfreq_(2000);
r.centerfreq_(20000);

// Change wet
r.wet_(0.0);
r.wet_(0.2);
r.wet_(0.4);
r.wet_(0.6);
r.wet_(0.8);
r.wet_(1.0);

// Change feed
r.feed_(0.25);
r.feed_(0.35);
r.feed_(0.45);
r.feed_(0.55);
r.feed_(0.65);

// Change width
r.width_(0);
r.width_(0.25);
r.width_(0.5);
r.width_(0.75);
r.width_(1);



::