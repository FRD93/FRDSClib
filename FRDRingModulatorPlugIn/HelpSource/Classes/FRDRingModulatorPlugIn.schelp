TITLE:: FRDRingModulatorPlugIn
summary:: Ring modulator on stereo input.
categories:: FRD-PlugIns
related:: FRDPitchTrackRingModulatorPlugIn

DESCRIPTION::
FRDRingModulatorPlugIn is a language-side class that performs ring modulation on a stereo input bus.



CLASSMETHODS::



METHOD:: new
Create a new FRDRingModulatorPlugIn instance.
ARGUMENT:: inCh
Input channel.
ARGUMENT:: outCh
Output channel.
ARGUMENT:: freq
Modulating frequency.
ARGUMENT:: wet
Dry/wet ratio, from 0.0 to 1.0.
ARGUMENT:: addAction
Add action for the synth (defaults to 'addToTail').
ARGUMENT:: actionNode
Node to connect the addAction to (if needed by the addAction argument, defaults to 1).
returns:: A FRDRingModulatorPlugIn instance.



INSTANCEMETHODS::

METHOD:: inCh
Get/set the input channel index.
ARGUMENT:: inCh
Input channel index.
returns:: Input channel index.

METHOD:: outCh
Get/set the output channel index.
ARGUMENT:: outCh
Output channel index.
returns:: Output channel index.

METHOD:: freq
Get/set the modulating frequency.
ARGUMENT:: freq
Modulating frequency.
returns:: Modulating frequency.

METHOD:: wet
Get/set the wet factor.
ARGUMENT:: wet
Wet factor.
returns:: Wet factor.

METHOD:: asMixerMatrixProcess
Return a Dictionary for integration with FRDMixerMatrixPlugIn.

METHOD:: showGUI
Show the graphical user interface.

METHOD:: writeSynthDef
Write internal synth definitions (to be run only once when installing this class!).










EXAMPLES::


code::

(
// Some test source
SynthDef(\TestSignal, { | outCh=20 |
	var sig, env, trig, freq;
	trig = Impulse.kr(TRand.kr(0.5, 8, Impulse.kr(0.5)).round(0.25));
	freq = TExpRand.kr(38, 99, trig).round(6).midicps;
	env = EnvGen.ar(Env.perc(0.01, 0.21), trig, 1, 0.0, TExpRand.kr(0.75, 1.25, Impulse.kr(0.25)), doneAction: 0);
	sig = SinOsc.ar(freq + SinOsc.ar(freq*env, 0, 0.5*freq*env*SinOsc.ar(0.1).abs.pow(4)), 0, env * 0.1 * AmpCompA.kr(freq));
	sig = Pan2.ar(sig, Lag2.ar(TRand.ar(-0.63, 0.63, trig), 0.5));
	Out.ar(outCh, sig);
}).add;
)



(
// Run source
x = Synth.head(s, \TestSignal);
// Run reverb plug in
r = FRDRingModulatorPlugIn(inCh: 20, outCh: 0, freq: 140, wet: 0.4, addAction: 'addAfter', actionNode: x);
)

// Show GUI
r.showGUI();



::