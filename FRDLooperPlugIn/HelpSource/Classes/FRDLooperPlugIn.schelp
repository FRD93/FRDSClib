TITLE:: FRDLooperPlugIn
summary:: A custom stereo reverb synth with it's own GUI. Thought to be used for live electronics.
categories:: FRD-PlugIns


DESCRIPTION::
Simple loop station.



CLASSMETHODS::

METHOD:: new
Create a FRDLooperPlugIn instance.
ARGUMENT:: inCh
Input channel.
ARGUMENT:: outCh
Output channel.
ARGUMENT:: inGain
Input gain value.
ARGUMENT:: outGain
Output gain value.
ARGUMENT:: feedback
Feedback factor.
ARGUMENT:: time
Length of the delay line. Max 16 seconds.
ARGUMENT:: addAction
Add action for the synth (defaults to 'addToHead').
ARGUMENT:: actionNode
Node to connect the addAction to (if needed by the addAction argument, defaults to 1).
returns:: A FRDLooperPlugIn instance.



INSTANCEMETHODS::

METHOD:: inCh
Get/set the input channel index.
ARGUMENT:: inCh
Input channel index.
returns:: Input channel index.

METHOD:: outCh
Get/set the output channel index.
ARGUMENT:: outCh
Output channel index.
returns:: Output channel index.

METHOD:: inGain
Get/set input gain value in dB.
ARGUMENT:: inGain
returns:: Gain value.

METHOD:: outGain
Get/set output gain value in dB.
ARGUMENT:: outGain
returns:: Gain value.

METHOD:: feedback
Get/set feedback value.
ARGUMENT:: feedback
returns:: Feedback value.

METHOD:: time
Get/set delay time.
ARGUMENT:: time
returns:: Delay time value.

METHOD:: synth
Get the synth instance.
returns:: Synth instance.

METHOD:: asMixerMatrixProcess
Return a Dictionary for integration with FRDMixerMatrixPlugIn.

METHOD:: showGUI
Show the graphical user interface.

METHOD:: writeSynthDef
Write internal synth definitions (to be run only once when installing this class!).





EXAMPLES::

Basic usage:

code::

(
// Test source
SynthDef(\TestSignal, { | outCh=20 |
	var sig, env, trig, freq;
	trig = Impulse.kr(TRand.kr(0.5, 8, Impulse.kr(0.5)).round(0.25));
	freq = TExpRand.kr(38, 99, trig).round(6).midicps;
	env = EnvGen.ar(Env.perc(0.01, 0.21), trig, 1, 0.0, TExpRand.kr(0.75, 1.25, Impulse.kr(0.25)), doneAction: 0);
	sig = SinOsc.ar(freq + SinOsc.ar(freq*env, 0, 0.5*freq*env*SinOsc.ar(0.1).abs.pow(4)), 0, env * 0.1 * AmpCompA.kr(freq));
	sig = Pan2.ar(sig, Lag2.ar(TRand.ar(-0.63, 0.63, trig), 0.5));
	Out.ar(outCh, sig);
}).add;
)


(
// Run source
x = Synth.head(s, \TestSignal, [\outCh, 20]);
// Run looper
l = FRDLooperPlugIn(inCh: 20, outCh: 0, feedback: 0.5, time: 7, addAction: 'addAfter', actionNode: x);
)

// Change feedback
l.feedback_(0.89);
l.feedback_(0.15);

// Change delay time
l.time_(0.25);
l.time_(2.5);

// Show GUI
l.showGUI();

// Loop station:

// 1) Record input
l.feedback_(0);

// 2) Stop recording and loop
l.feedback_(1);

::