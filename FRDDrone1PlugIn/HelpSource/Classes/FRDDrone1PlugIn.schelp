TITLE:: FRDDrone1PlugIn
summary:: A drone-like synthesizer with GUI. Thought to be used for live electronics.
categories:: FRD-PlugIns
related:: FRDDrone1

DESCRIPTION::
FRDDrone1PlugIn is a language-side class that implements a GUI for the FRDDrone1 ugen.



CLASSMETHODS::



METHOD:: new
Create a new FRDDrone1PlugIn instance.
returns:: A FRDDrone1PlugIn instance.



INSTANCEMETHODS::


METHOD:: freq
Get/set frequency.
ARGUMENT:: freq


METHOD:: lowpass
Get/set lowpass frequency.
ARGUMENT:: lowpass

METHOD:: amp
Get/set amplitude.
ARGUMENT:: amp


METHOD:: gate
Get/set gate.
ARGUMENT:: gate


METHOD:: octA
Get/set octaver amplitude.
ARGUMENT:: octA

METHOD:: oct
Get/set octaver octave.
ARGUMENT:: oct

METHOD:: rmA
Get/set ring modulation amplitude.
ARGUMENT:: rmA

METHOD:: flangerA
Get/set flanger amplitude.
ARGUMENT:: flangerA

METHOD:: vel
Get/set flanger sweep frequency.
ARGUMENT:: vel

METHOD:: max
Get/set flanger max delay time.
ARGUMENT:: max

METHOD:: lagTime
Get/set lag time.
ARGUMENT:: lagTime

METHOD:: outCh
Get/set out channel.
ARGUMENT:: outCh

METHOD:: explode
Trigger explosion.

METHOD:: asMixerMatrixProcess
Return a Dictionary for integration with FRDMixerMatrixPlugIn.

METHOD:: showGUI
Show graphical user interface.

METHOD:: writeDefFile
Write internal synth definitions (to be run only once when installing this class!).




METHOD:: presetPath
Get/set the path where the plugin is looking for presets.
returns:: Path











EXAMPLES::

Basic usage:

code::

(
d = FRDDrone1PlugIn(amp: 0.5, outCh: 30);
d.showGUI;
r = FRDReverbPlugIn(36, 0, 0.7, -0.25, 0.19);
m = FRDMixerMatrixPlugIn();
m.addFRDProcess("Drone", d);
m.addFRDProcess("Reverb", r);
)

r.clearness_(0.125)



(
d.lagTime_(0.02);
d.freq_(65);
d.rmA_(0.8);
d.lowpass_(90);
d.flangerA_(0.9);
d.vel_(0.2);
d.max_(0.02);
d.oct_(0.3);
d.octA_(0.6);
d.amp_(0.07);
)

(
d.lagTime_(9.8);
d.freq_(9900);
d.rmA_(0.99);
d.lowpass_(1000);
d.oct_(1);
d.octA_(0.9);
d.flangerA_(0.19);
d.vel_(0.05);
d.max_(0.06);
d.amp_(0.5);
)

(
d.lagTime_(1.8);
d.freq_(12000);
d.rmA_(0.99);
d.lowpass_(600);
d.oct_(0.77);
d.octA_(0.9);
d.flangerA_(0.8);
d.vel_(0.09);
d.max_(0.6);
d.amp_(0.6);
)



(
d.lagTime_(1.8);
d.freq_(11050);
d.rmA_(1);
d.lowpass_(720);
d.oct_(0.77);
d.octA_(1);
d.flangerA_(0.9);
d.vel_(0.1);
d.max_(0.9);
d.amp_(0.5);
)



(
d.lagTime_(1.8);
d.freq_(8.79);
d.rmA_(1);
d.lowpass_(133);
d.oct_(0.77);
d.octA_(1);
d.flangerA_(0.9);
d.vel_(0.1);
d.max_(0.9);
d.amp_(0.1);
)

d.explode;

s.freqscope

::












