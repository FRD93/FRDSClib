TITLE:: FRDMarkovChain
summary:: A custom stereo reverb synth with it's own GUI. Thought to be used for live electronics.
categories:: FRD-PlugIns
related:: FRDReverb

DESCRIPTION::
Markov Chain implementation.



CLASSMETHODS::



METHOD:: new
Create a new FRDReverbPlugIn instance.
ARGUMENT:: states
States of the markov chain.
ARGUMENT:: transitionMatrix
Transition matrix of the markov chain.
ARGUMENT:: initialState
Initial state of the markov chain.
returns:: A FRDMarkovChain instance.



INSTANCEMETHODS::

METHOD:: impose
Set the current state of the markov chain.
ARGUMENT:: state
returns:: Current state.

METHOD:: setTransitionMatrix
Set the transition matrix of the markov chain.
ARGUMENT:: transitionMatrix
returns:: Transition matrix.

METHOD:: next
Compute the next state of the markov chain with respect to the current state and the transition matrix.
returns:: Current state.









EXAMPLES::

Basic usage:

code::
// Simple test markov chain
(
var states = ["Sun", "Fog", "Rain"];
var transitionMatrix = [
	[0.5, 0.4, 0.1], // "Sun" to ["Sun", "Fog", "Rain"]
	[0.2, 0.4, 0.4], // "Fog" to ["Sun", "Fog", "Rain"]
	[0.1, 0.3, 0.6], // "Rain" to ["Sun", "Fog", "Rain"]
];
m = FRDMarkovChain(states, transitionMatrix, "Sun");
)

// Get next state
m.next;

// Set initial state
m.impose("Sun");

// Change transition matrix
(
m.setTransitionMatrix([
	[0.1, 0.1, 0.8], // "Sun" to ["Sun", "Fog", "Rain"]
	[0.5, 0.3, 0.2], // "Fog" to ["Sun", "Fog", "Rain"]
	[0.4, 0.1, 0.5], // "Rain" to ["Sun", "Fog", "Rain"]
])
)
::